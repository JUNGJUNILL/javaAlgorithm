package datastructure_DP;

public class P004_1로만들기 {
	 /*
	 정수 X가 주어졌을 때, 정수 X에 사용할 수 있는 연산은 다음과 같이 4가지입니다. 
	 
	 1.X가 5로 나누어 떨어지면, 5로 나눕니다. 
	 2.X가 3으로 나누어 떨어지면, 3으로 나눕니다. 
	 3.X가 2로 나누어 떨어지면, 2로 나눕니다.
	 4.X에서 1을 뺍니다. 
	 
	 정수 X가 주어졌을 때, 연산 4개를 적절히 사용해서 값을 1로 만들고자 합니다. 
	 연산을 사용하는 횟수의 최솟값을 출력하세요. 
	 
	 26 -> 25 -> 5 -> 1 연산횟수 3번 
	
	 예를들어 정수 X가 6일 경우 
	 X에서 1을 뺀 값의 최적의 해  5
	 X를 2로 나눈 값의 최적의 해  3
	 X를 3로 나눈 값의 최적의 해  2
	 
	 중에서 가장 작은 값을 가지는 경우를 골라서  X가 6일때의 옵티면 솔루션을 구할 수 있다. 
	 
	 매 상황마다 가능하다면 최대 4가지의 대해서 각각 부분문제를 확인 해 보고
	 그러한 부분문제중에서 가장 적은 값을 구해서 거기에 1을 더한 값을 구해서 
	 옵티멀 솔루션을 구할 수 있게 된다. 
	 
	 ai = i를 1로 만들기 위한 최소 연산 횟수 
	 
	 */
	 
	
	
	public static int[] d =new int[30001];
	public static void main(String[] args) {
		
		int x =6; 
		
		// x가 1인 경우 0 
	 
		for(int i=2; i<=x; i++){
			d[i] = d[i-1]+1; // x가 2인 경우 1
			if(i % 2 ==0){
				d[i] = Math.min(d[i], d[i/2]+1); 
			}else if(i % 3 ==0){
				d[i] = Math.min(d[i], d[i/3]+1); 
			}else if(i % 5 ==0){
				d[i] = Math.min(d[i], d[i/5]+1); 
			}
			//4가지 경우 중에서 가장 적은 값을 가지는 것을 골라서 거기에 1을 더한 값을	
			//넣을 수 있도록 점화식을 설정할 수 있다. 
			
			
		}
		
		System.out.println(d[x]);
		

	}

}
